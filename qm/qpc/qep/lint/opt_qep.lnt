//////////////////////////////////////////////////////////////////////////////
// Product:  QEP/C PC-Lint 9.x configuration
// Last Updated for Version: 4.1.05
// Date of the Last Update:  Oct 29, 2010
//
//                    Q u a n t u m     L e a P s
//                    ---------------------------
//                    innovating embedded systems
//
// Copyright (C) 2002-2010 Quantum Leaps, LLC. All rights reserved.
//
// This software may be distributed and modified under the terms of the GNU
// General Public License version 2 (GPL) as published by the Free Software
// Foundation and appearing in the file GPL.TXT included in the packaging of
// this file. Please note that GPL Section 2[b] requires that all works based
// on this software must also be made publicly available under the terms of
// the GPL ("Copyleft").
//
// Alternatively, this software may be distributed and modified under the
// terms of Quantum Leaps commercial licenses, which expressly supersede
// the GPL and are specifically designed for licensees interested in
// retaining the proprietary status of their code.
//
// Contact information:
// Quantum Leaps Web site:  http://www.quantum-leaps.com
// e-mail:                  info@quantum-leaps.com
//////////////////////////////////////////////////////////////////////////////


// Assertions
-emacro(970, Q_DEFINE_THIS_MODULE)  // MISRA 2004 Rule 6.3
-emacro(970, Q_DEFINE_THIS_FILE)    // MISRA 2004 Rule 6.3
-emacro(970, Q_ASSERT_COMPILE)      // MISRA 2004 Rule 6.3

// QEP
-emacro(929, Q_TRAN)                // MISRA 2004 Rule 11.4
-emacro(929, Q_SUPER)               // MISRA 2004 Rule 11.4

// QS
-emacro(506, QS_BEGIN_) // Constant value Boolean [MISRA 2004 Rules 13.7 & 14.1]
-emacro(774, QS_BEGIN_) // Boolean within 'if' always evaluates to False
-emacro(572, QS_BEGIN_) // MISRA Rule 38, excessive shift value
-emacro(778, QS_BEGIN_) // Constant expression evaluates to 0
-emacro(912, QS_BEGIN_) // Implicit binary conversion from int to unsigned int
//-emacro(960, QS_END_)   // MISRA Rule 59, left brace expected
//-emacro(725, QS_END_)   // Expected positive indentation
-emacro(923, QS_OBJ_)   // MISRA 2004 Rule 11.3, cast from pointer to unsigned long
-emacro(923, QS_FUN_)   // MISRA 2004 Rule 11.3, cast from pointer to unsigned long
//-emacro(717, QF_INT_LOCK)    // do ... while(0)
//-emacro(717, QF_INT_UNLOCK)  // do ... while(0)
//-emacro(960, QF_QS_INT_LOCK) // MISRA Rule 59, left brace expected

// Miscallaneous
-e546                   // Suspicious use of &
