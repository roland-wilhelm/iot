/* =============================================================================
** Copyright (C) 2004 Infineon Technologies.
**
** All rights reserved.
** =============================================================================
**
** =============================================================================
**
** This document contains proprietary information belonging to Infineon 
** Technologies. Passing on and copying of this document, and communication of 
** its contents is not permitted without prior written authorisation.
**
** =============================================================================
*/
/* =============================================================================
**
** Revision Information :
** @FILENAME@:       COMPILER.H
** @VERSION@:        3.0
** @DATE@:           17/01/2006    
**
** =============================================================================
**
** Project: TC1130
** Block: ALL MODULES.
**
** =============================================================================
** Contents:  This file contains Compiler dependent specific definitions for 
**            LLDs compatibility with different tool chains.
**            The compiler being used will be auto detected.
**            The currently supported compilers are 
**            GNU     - 2.4 version onwards.
**            TASKING - 1.5, 2.0x version onwards.
**            eLINUX -  2.4.19 version onwards. 
**            The DAVE compatible definitions are also supported.
**
** =============================================================================
** References: None.
**
** =============================================================================
** History:
**
** Date            Author                 Comment
** 05/12/2002 	  Jonathan Fox (DC BRS)	   Created.    
** 16/03/2004     Ranganatha (DC BA)       Rewrote to support linux, tasking and 
**                                         GNU definitions. 
** 2/08/2004      Jayashree(DC BA)         Added support for eLinux enable and 
**                                         disable definitions
** @CHANGE_HISTORY@
** =============================================================================
*/
/*@doc API */

#ifndef __IFX_TYPES_H
#define __IFX_TYPES_H

/* 
 * @topic2 Compiler dependent APIs | 
 *			  Compiler dependent specific definitions for compatibility 
 *            purposes. The compiler being used will be auto detected.
 *            The currently supported compilers are 
 *            GNU     - 2.4 version onwards.
 *            TASKING - 1.5, 2.0x version onwards.
 *            eLINUX -  2.4.19 version onwards. 
 *            The DAVE compatible definitions are also supported.
 *            Appropriate errors are generated at compile time if compilers
 *            are old versions and also if there is a mismatch.
 */


/* Check for Linux and its compatibility */
#ifdef __KERNEL__
#include <linux/version.h>
#include <linux/init.h>
#if LINUX_VERSION_CODE < KERNEL_VERSION(2,4,19)
#error "KERNEL VERSION NOT MATCHING"
#else

/* @head2 Definitons for embedded Linux | */

/* 
   @def IFX_COMPILER_LINUX |
   Source files can use this definition for compatibility with eLinux.
*/
#define IFX_COMPILER_LINUX  1
#endif
#endif /*__KERNEL__*/


/* Will hold the definitons compatible with DAVE.
*  When used with DAVE, main.h file is auto-generated by DAVE  
*  Dumy header file when not related with DAVE.
*  User can use IFX_DAVE_GEN macrof for compatibilty purposes.
*/
#ifndef IFX_COMPILER_LINUX
#include "main.h"        
#endif



/* Learn automatically on which compiler i am with and compile */
#ifndef IFX_COMPILER_LINUX  
/* if not linux check for GNU or Tasking */
#ifndef  _TASKING 
    /* Check for GNU */
    #ifdef __GNUC__
    /* check for GNU compiler. */
    /* Check for Major versions versions */
    #if (__GNUC__ < 2) || (__GNUC_ >= 4)           /* Major version */
    #error "Check for compatible GNU version!" 
   /* "If version you are using are compatible with older, comment the error" */
    #else
    #define IFX_GNU_VER3            /* GNU version 3 (2 and 3 compatible)  */         
    #endif
    /* Check for Minor versions versions */
    #if ( (__GNUC__ == 3 ) && (__GNUC_MINOR__ < 3) )
    #endif
    /* Check for patches */
    #if __GNUC_PATCHLEVEL__ > 0
    #endif

    #else     /* ifdef __GNU__ */
	   	/* check for tasking 2.xxx */
	#ifdef __TASKING__
    #if (__CTC__ >= 2)
	#define IFX_TASKING_VER2  1
	#else
    #error "Check Tasking version is compatible!" 
    #endif 
	#else	/*ifdef __TASKING__ */
    #error "No compilers are avaiable!" 
	#endif /*ifdef __TASKING__ */

		
    #endif  /* ifdef __GNUC__*/


#else   /* _TASKING */
	#ifdef _TASKING
    #define IFX_TASKING_VER1   1         /* Tasking version older than 2.0 */         
	#else
    #error "No compilers are avaiable!" 
	#endif

#endif /* end of _TASKING ifndef */

#endif /* IFX_COMPILER_LINUX */

#ifndef IFX_COMPILER_LINUX
/* Do inclusions specific to compilers e.g., library files for nops etc */
#ifdef  IFX_GNU_VER3 
#include <machine/cint.h>             
#include <machine/intrinsics.h>	
#endif
#else
/* include linux *.h files here */
#include <linux/config.h>
#include <linux/module.h>
#include <linux/string.h>
#include <linux/bitops.h>
#include <linux/slab.h>
#include <linux/interrupt.h>  /* for in_interrupt() */
#include <linux/kmod.h>
#include <linux/init.h>
#include <linux/devfs_fs_kernel.h>
#include <linux/spinlock.h>
#include <linux/irq.h>
#endif


#ifdef IFX_TASKING_VER1
 /* None!*/
#endif

#ifdef IFX_TASKING_VER2
 /* None!*/
#endif

/*--------------------------------------------------------------------
 * Storage macros
 *-------------------------------------------------------------------*/

/*
  'U' - unsigned
  'S' - signed
  'V' - volatile
  'ST' - static
  'STU' - static unsigned char

  Note: Some compilers provide option to treat char as insigned char.
  If that option is enabled, then IFX_SINT8 here will be treated as 
  unsigned. User is recommended not to enable that option.
*/   
#define IFX_SINT8    char
#define IFX_UINT8    unsigned char
#define IFX_VUINT8   volatile unsigned char
#define IFX_VSINT8   volatile char
#define IFX_STINT8   static char
#define IFX_STUINT8  static unsigned char

#define IFX_SINT16   short
#define IFX_UINT16   unsigned short
#define IFX_VUINT16  volatile unsigned short
#define IFX_VSINT16  volatile short
#define IFX_STINT16  static short
#define IFX_STUINT16 static unsigned short

#define IFX_SINT32   int
#define IFX_UINT32   unsigned int
#define IFX_VUINT32  volatile unsigned int
#define IFX_VSINT32  volatile int
#define IFX_STUINT32 static unsigned int
#define IFX_STUINT32 static unsigned int
#define IFX_ULONG    unsigned long
#define IFX_SFLOAT   float
#define IFX_CONSTANT const



#ifndef IFX_COMPILER_LINUX  
/* if not linux, compile GNU or Tasking defintions */


/* @head2 Definitons for GNU | */
#ifdef  IFX_GNU_VER3 


/*
   @def IFX_INIT_ISR_VECTORS | 
   In GNU ISR are vector placed at run-time unlike statically allocated in 
   tasking during compilation. In fact ISRs are installed at run-time in GNU.
   So IFX_INIT_ISR_VECTORS() routine should be called for initializing vector 
   and trap tables before making a call to IFX_ISR_INIT. This can be done only 
   once during system start-up and need not be called every time a particular 
   device wants to install an interrupt.
*/
#define IFX_INIT_ISR_VECTORS _init_vectab     


/* 
   @def  IFX_ISR_INIT | ISR initialization wrapper,
   IFX_ISR_INIT provides the compiler dependent ISR initialization wrapper for GNU. 
   It will take interrupt priority, ISR name and the argument to ISR as arguments. 
   Based on interrupt priority compiler will place the ISR address in Interrupt Vector Table.   
   In GNU ISR are vector placed at run-time unlike statically allocated in 
   tasking during compilation. 

   IFX_ISR_INIT installs an interrupt handler for interrupt number intno.  If this
   interrupt occurs, the handler will be called with the given argument.
   A non-zero return value indicates success, zero indicates an error
   occurred and the handler couldn't be installed successfully. 
   Note that interrupt priorities should be different. See tricore-gcc manual
   for further information.

   Also see IFX_INIT_ISR_VECTORS. 

   IFX_ISR_INIT_ON kept for older HAL versions. Instead IFX_COMPILER_GNU can be used.
*/
#define IFX_ISR_INIT_ON 1 /* IFX_ISR_INIT is defined as nothing */
#define IFX_ISR_INIT(INTR_PRIORITY, ISR_NAME, ISR_ARGU)  _install_int_handler(INTR_PRIORITY, (void (*) (int))ISR_NAME, ISR_ARGU)


/* 
   @def IFX_COMPILER_GNU |
   Source files can use this as a flag to check to compile with GCC 
   e.g pragma and attributes 
*/
#define IFX_COMPILER_GNU    1

/* 
@def  ENABLE_GLOBAL_INTERRUPT |
Use this for enabling the global interrupt definition.   
*/
#define ENABLE_GLOBAL_INTERRUPT  _enable

/*
@def  DISABLE_GLOBAL_INTERRUPT |
Use this for disabling the global interrupt definition.   
*/
#define DISABLE_GLOBAL_INTERRUPT _disable

/*
@def  IFX_ISYNC |
Use this for instruction sync.
*/
#define IFX_ISYNC _isync


#else /* else IFX_GNU_VER3 */

/* @head2 Definitons for Tasking |*/



/* @head3 Version specific definitons for tasking 1.5 |*/
#ifdef IFX_TASKING_VER1            /* Tasking version greater than 1 */         

/*
@def  IFX_ISYNC |
Use this for instruction sync.
*/
#define IFX_ISYNC _isync

/* 
  @def IFX_ISR_FUNC | ISR qualifier wrapper,
  IFX_ISR_FUNC provides the compiler dependent ISR qualifier wrappers, 
  which will be used at definition of ISR for tasking. It will take 
  interrupt priority and ISR name as arguments. Based on interrupt priority compiler 
  will place the ISR address in Interrupt Vector Table. 
  IFX_ISR_FUNC_ON kept for older versions. Instead IFX_COMPILER_TASKING can be used.
  @comm In GNU interrupts are vector placed at run-time unlike statically allocated in 
  tasking during compilation.
*/
#define IFX_ISR_FUNC(_INT_NUMBER, _FUNC_NAME) \
         void _interrupt(_INT_NUMBER) _FUNC_NAME(void)

/* 
@def  ENABLE_GLOBAL_INTERRUPT |
Use this for enabling the global interrupt definition.   
*/
#define ENABLE_GLOBAL_INTERRUPT  _enable

/*
@def  DISABLE_GLOBAL_INTERRUPT |
Use this for disabling the global interrupt definition.   
*/
#define DISABLE_GLOBAL_INTERRUPT _disable

#else  /* else of IFX_TASKING_VER1 */

 /* @head3 Version specific definitons for tasking 2.0 onwards | */
#ifdef IFX_TASKING_VER2

/*
@def  IFX_ISYNC |
Use this for instruction sync.
*/
#define IFX_ISYNC __isync


/* 
  @def IFX_ISR_FUNC | ISR qualifier wrapper,
  IFX_ISR_FUNC provides the compiler dependent ISR qualifier wrappers, 
  which will be used at definition of ISR for tasking. It will take 
  interrupt priority and ISR name as arguments. Based on interrupt priority compiler 
  will place the ISR address in Interrupt Vector Table. 
  IFX_ISR_FUNC_ON kept for older versions. Instead IFX_COMPILER_TASKING can be used.
  @comm In GNU interrupts are vector placed at run-time unlike statically allocated in 
  tasking during compilation. 
*/
#define IFX_ISR_FUNC(_INT_NUMBER, _FUNC_NAME) \
        void __interrupt(_INT_NUMBER) _FUNC_NAME(void)


/* 
@def  ENABLE_GLOBAL_INTERRUPT |
Use this for enabling the global interrupt definition.   
For enabling interrupts 'immediately' inside an ISR use 
*/
#define ENABLE_GLOBAL_INTERRUPT  __enable



/*
@def  DISABLE_GLOBAL_INTERRUPT |
Use this for disabling the global interrupt definition.   
*/
#define DISABLE_GLOBAL_INTERRUPT __disable


#else  /* else of IFX_TASKING_VER2 */
 #error "Unknown error!. Check me at compiler.h"
#endif /* endif of IFX_TASKING_VER2 */

#endif   /*endif of IFX_TASKING_VER1 */

/* @head3 Common definitons for all tasking versions | */

#if (IFX_TASKING_VER1 || IFX_TASKING_VER2)
/* 
   @def IFX_COMPILER_TASKING |
   Source files can use this definition for compatibility with either 
   Tasking 1.5 or 2.xx
*/
#define IFX_COMPILER_TASKING      1
#endif


/* 
   @def  IFX_ISR_FUNC_ON | ISR compilation wrapper,
   IFX_ISR_FUNC_ON provides the compiler dependent ISR initialization wrapper for Tasking. 

   IFX_ISR_FUNC_ON kept for older HAL versions support. Instead IFX_COMPILER_TASKING can be used.
*/

#define IFX_ISR_FUNC_ON 1 /* IFX_ISR_INIT is defined */

#endif /* endif of IFX_GNU_VER3 */

#else /* IFX_COMPILER_LINUX */
/* compile eLinux defintions */
/*
@def  IFX_ISYNC |
Use this for instruction sync.
*/
#define IFX_ISYNC()  	__asm__ volatile ("isync")

#define ENABLE_GLOBAL_INTERRUPT  sti
#define DISABLE_GLOBAL_INTERRUPT cli

#endif /* IFX_COMPILER_LINUX */

#endif /* #ifndef __IFX_TYPES_H */



